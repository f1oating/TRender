#ifndef TD3D_H
#define TD3D_H

#include <d3d11.h>
#include <DirectXMath.h>
#include <string>

constexpr const char* PROJECTION_MATRIX_CONSTANT_BUFFER = "PROJECTION_MATRIX_CONSTANT_BUFFER";
constexpr const char* VIEW_MATRIX_CONSTANT_BUFFER = "VIEW_MATRIX_CONSTANT_BUFFER";
constexpr const char* WORLD_MATRIX_CONSTANT_BUFFER = "WORLD_MATRIX_CONSTANT_BUFFER";
constexpr const char* SREEN_QUAD_STATIC_BUFFER = "SREEN_QUAD_STATIC_BUFFER";

struct MatrixCBS
{
    DirectX::XMMATRIX matrix;
};

D3D11_INPUT_ELEMENT_DESC SPRITE_TEXTURE_INPUT_LAYOUT[] =
{
    { "POSITION", 0, DXGI_FORMAT_R32G32_FLOAT, 0, 0, D3D11_INPUT_PER_VERTEX_DATA, 0 },
    { "TEXCOORD", 0, DXGI_FORMAT_R32G32_FLOAT, 0, 8u, D3D11_INPUT_PER_VERTEX_DATA, 0 },
};

D3D11_INPUT_ELEMENT_DESC SPRITE_COLOR_INPUT_LAYOUT[] =
{
    { "POSITION", 0, DXGI_FORMAT_R32G32_FLOAT, 0, 0, D3D11_INPUT_PER_VERTEX_DATA, 0 },
    { "COLOR", 0, DXGI_FORMAT_R32G32B32A32_FLOAT, 0, 8u, D3D11_INPUT_PER_VERTEX_DATA, 0 },
};

D3D11_INPUT_ELEMENT_DESC GEOMETRY_INPUT_LAYOUT[] =
{
    { "POSITION", 0, DXGI_FORMAT_R32G32B32_FLOAT, 0, 0, D3D11_INPUT_PER_VERTEX_DATA, 0 },
    { "TEXCOORD", 0, DXGI_FORMAT_R32G32_FLOAT, 0, 12u, D3D11_INPUT_PER_VERTEX_DATA, 0 },
    { "NORMAL", 0, DXGI_FORMAT_R32G32B32_FLOAT, 0, 20u, D3D11_INPUT_PER_VERTEX_DATA, 0 },
    { "TANGENT", 0, DXGI_FORMAT_R32G32B32_FLOAT, 0, 32u, D3D11_INPUT_PER_VERTEX_DATA, 0 },
};

D3D11_INPUT_ELEMENT_DESC SKYBOX_INPUT_LAYOUT[] =
{
    { "POSITION", 0, DXGI_FORMAT_R32G32B32_FLOAT, 0, 0, D3D11_INPUT_PER_VERTEX_DATA, 0 },
    { "TEXCOORD", 0, DXGI_FORMAT_R32G32B32_FLOAT, 0, 12u, D3D11_INPUT_PER_VERTEX_DATA, 0 },
};

D3D11_INPUT_ELEMENT_DESC SCREEN_QUAD_INPUT_LAYOUT[] =
{
    { "POSITION", 0, DXGI_FORMAT_R32G32B32_FLOAT, 0, 0, D3D11_INPUT_PER_VERTEX_DATA, 0 },
    { "TEXCOORD", 0, DXGI_FORMAT_R32G32_FLOAT, 0, 12u, D3D11_INPUT_PER_VERTEX_DATA, 0 },
};

#endif
